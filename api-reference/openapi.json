{
  "openapi": "3.0.0",
  "info": {
    "title": "Jamquest API",
    "version": "1.0.0",
    "description": "API for managing DJ music requests, user accounts, and wallet operations."
  },
  "servers": [
    {
      "url": "https://jamquest-dev.techboo.net/api/v1"
    }
  ],
  "paths": {
    "/general-info": {
      "get": {
        "summary": "Get General Data",
        "description": " Retrieves general information about the site, including site name, support contact details, social media links, and live chat URL.",
        "tags": [
          "General Data"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/okResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/GeneralInfo"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/auth/register": {
      "post": {
        "summary": "Register a new user",
        "description": "Creates a new user account with the provided information.",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "maxLength": 255,
                    "description": "The full name of the user."
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "The email address of the user. Must be unique."
                  },
                  "phone": {
                    "type": "string",
                    "description": "The phone number of the user. Must be unique."
                  },
                  "password": {
                    "type": "string",
                    "minLength": 8,
                    "description": "The user's password. Must be at least 8 characters long."
                  },
                  "is_dj": {
                    "type": "boolean",
                    "description": "Indicates whether the user is registering as a DJ (true) or a regular user (false)."
                  }
                },
                "required": [
                  "name",
                  "email",
                  "phone",
                  "password",
                  "is_dj"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/okResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "user": {
                              "$ref": "#/components/schemas/User"
                            },
                            "token": {
                              "type": "string",
                              "description": "JWT token for authentication. Use this token in the Authorization header for subsequent requests."
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "A general error message indicating validation failure."
                    },
                    "errors": {
                      "type": "object",
                      "description": "Detailed validation errors for each field that failed validation."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "summary": "User login",
        "description": "Authenticates a user and returns a token. Users can login with either email/password or phone/password combination.",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "The email address of the user. Required if phone is not provided."
                  },
                  "phone": {
                    "type": "string",
                    "description": "The phone number of the user. Required if email is not provided."
                  },
                  "password": {
                    "type": "string",
                    "description": "The user's password."
                  }
                },
                "required": [
                  "password"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/okResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "user": {
                              "$ref": "#/components/schemas/User"
                            },
                            "token": {
                              "type": "string",
                              "description": "JWT token for authentication. Use this token in the Authorization header for subsequent requests."
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid credentials"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "A general error message indicating validation failure."
                    },
                    "errors": {
                      "type": "object",
                      "description": "Detailed validation errors for each field that failed validation."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/reset-password": {
      "post": {
        "summary": "Request password reset",
        "description": "Initiates the password reset process for a user. A verification code will be sent to the user's email or phone.",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "The email address of the user. Required if phone is not provided."
                  },
                  "phone": {
                    "type": "string",
                    "description": "The phone number of the user. Required if email is not provided."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset initiated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/okResponse"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "No user found with the provided email/phone."
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "A general error message indicating validation failure."
                    },
                    "errors": {
                      "type": "object",
                      "description": "Detailed validation errors for each field that failed validation."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/reset-password/verify": {
      "post": {
        "summary": "Verify and set new password",
        "description": "Verifies the code and sets a new password for the user.",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "The email address of the user. Required if phone is not provided."
                  },
                  "phone": {
                    "type": "string",
                    "description": "The phone number of the user. Required if email is not provided."
                  },
                  "verification_code": {
                    "type": "string",
                    "description": "The verification code sent to the user's email or phone."
                  },
                  "password": {
                    "type": "string",
                    "description": "The new password for the user.",
                    "minLength": 8
                  },
                  "password_confirmation": {
                    "type": "string",
                    "description": "Confirmation of the new password."
                  }
                },
                "required": [
                  "verification_code",
                  "password",
                  "password_confirmation"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset successful",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/okResponse"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid or expired verification code",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid or expired verification code."
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "A general error message indicating validation failure."
                    },
                    "errors": {
                      "type": "object",
                      "description": "Detailed validation errors for each field that failed validation."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/user/logout": {
      "get": {
        "summary": "User logout",
        "description": "Logs out the user by invalidating the current access token.",
        "tags": [
          "Authentication"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully logged out",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/okResponse"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/user/personal-info": {
      "get": {
        "summary": "Get user's personal information",
        "description": "Retrieves the authenticated user's personal information.",
        "tags": [
          "User"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User information retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/okResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "user": {
                              "$ref": "#/components/schemas/User"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/user/nearby-djs": {
      "get": {
        "summary": "Find nearby DJs",
        "description": "Retrieves a paginated list of DJs near the specified location or the user's saved location.",
        "tags": [
          "User"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "latitude",
            "in": "query",
            "description": "Latitude of the search location. If not provided, user's saved latitude will be used.",
            "schema": {
              "type": "number",
              "format": "float"
            }
          },
          {
            "name": "longitude",
            "in": "query",
            "description": "Longitude of the search location. If not provided, user's saved longitude will be used.",
            "schema": {
              "type": "number",
              "format": "float"
            }
          },
          {
            "name": "radius",
            "in": "query",
            "description": "Search radius in kilometers. If not provided, user's saved radius will be used.",
            "schema": {
              "type": "number",
              "format": "float"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of DJs per page.",
            "schema": {
              "type": "integer",
              "default": 15
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination.",
            "schema": {
              "type": "integer",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/okResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/PaginatedDJListWithDistance"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Location data is missing",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/user/nearby-djs/city": {
      "get": {
        "summary": "Search DJs by city",
        "description": "Retrieves a list of DJs in the specified city, sorted by distance from the user.",
        "tags": [
          "User"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "city",
            "in": "query",
            "description": "City to search for DJs",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of DJs per page.",
            "schema": {
              "type": "integer",
              "default": 15
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination.",
            "schema": {
              "type": "integer",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/okResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/PaginatedDJListWithDistance"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/user/nearby-djs/state": {
      "get": {
        "summary": "Search DJs by state",
        "description": "Retrieves a list of DJs in the specified state, sorted by distance from the user.",
        "tags": [
          "User"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "state",
            "in": "query",
            "description": "State to search for DJs",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of DJs per page.",
            "schema": {
              "type": "integer",
              "default": 15
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination.",
            "schema": {
              "type": "integer",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/okResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/PaginatedDJListWithDistance"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/user/nearby-djs/location": {
      "get": {
        "summary": "Get nearby DJs by city, state, and country",
        "description": "Retrieves a list of DJs in the specified city, state, and country, sorted by distance from the user.",
        "tags": [
          "User"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "city",
            "in": "query",
            "description": "City to search for DJs",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "State to search for DJs",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "country",
            "in": "query",
            "description": "Country to search for DJs",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of DJs per page.",
            "schema": {
              "type": "integer",
              "default": 15
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination.",
            "schema": {
              "type": "integer",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/okResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/PaginatedDJListWithDistance"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/user/update-location": {
      "post": {
        "summary": "Update user location",
        "description": "Updates the user's location information including coordinates, radius, city, state, and country.",
        "tags": [
          "User Operations"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "latitude": {
                    "type": "number",
                    "format": "float",
                    "minimum": -90,
                    "maximum": 90,
                    "description": "Latitude of the user's location"
                  },
                  "longitude": {
                    "type": "number",
                    "format": "float",
                    "minimum": -180,
                    "maximum": 180,
                    "description": "Longitude of the user's location"
                  },
                  "radius": {
                    "type": "number",
                    "format": "float",
                    "minimum": 0,
                    "description": "Radius for nearby searches in kilometers"
                  },
                  "city": {
                    "type": "string",
                    "maxLength": 255,
                    "description": "City of the user's location"
                  },
                  "state": {
                    "type": "string",
                    "maxLength": 255,
                    "description": "State or region of the user's location"
                  },
                  "country": {
                    "type": "string",
                    "maxLength": 255,
                    "description": "Country of the user's location"
                  }
                },
                "required": [
                  "latitude",
                  "longitude",
                  "radius",
                  "city",
                  "state",
                  "country"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Location updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/okResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "user": {
                              "$ref": "#/components/schemas/User"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/user/dj/update-fees": {
      "post": {
        "summary": "Update DJ fees",
        "description": "Updates the authenticated DJ's fees for upcoming artists and popular songs.",
        "tags": [
          "User Operations"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "fee_upcoming_artist": {
                    "type": "number",
                    "example": 5.00
                  },
                  "fee_popular_song": {
                    "type": "number",
                    "example": 10.00
                  }
                },
                "required": [
                  "fee_upcoming_artist",
                  "fee_popular_song"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Fees updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/okResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "user": {
                              "$ref": "#/components/schemas/User"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Only DJs can set fees",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Only DJs can set fees."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user/dj/go-live": {
      "post": {
        "summary": "Toggle DJ online status",
        "description": "Allows a DJ to toggle their online/offline status.",
        "tags": [
          "User Operations"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "online": {
                    "type": "boolean",
                    "description": "Set to true to go online, false to go offline."
                  }
                },
                "required": [
                  "online"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Status updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/okResponse"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User is not a DJ",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Only DJs can toggle online status."
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "The given data was invalid."
                    },
                    "errors": {
                      "type": "object",
                      "properties": {
                        "online": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "The online field is required."
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user/update-username": {
      "post": {
        "summary": "Update username",
        "description": "Allows a user to update their username",
        "tags": [
          "User Operations"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "example": "DJ Cool"
                  }
                },
                "required": [
                  "username"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Username updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/okResponse"
                    }
                  ]
                }
              }
            }
          },
          "422": {
            "description": "Username already taken",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "The username has already been taken."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user/update-personal-info": {
      "post": {
        "summary": "Update Personal Information",
        "tags": [
          "User Operations"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "phone": {
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "email",
                  "phone"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Personal information updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "ok"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Personal information updated successfully"
                        },
                        "user": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string"
                            },
                            "email": {
                              "type": "string",
                              "format": "email"
                            },
                            "phone": {
                              "type": "string"
                            },
                            "email_verified": {
                              "type": "boolean"
                            },
                            "phone_verified": {
                              "type": "boolean"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user/supported-banks": {
      "get": {
        "summary": "Get list of supported banks",
        "description": "Retrieves a list of supported banks with their codes and names",
        "tags": [
          "User Operations"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "ok"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "bank_code": {
                            "type": "string",
                            "example": "120001"
                          },
                          "bank_name": {
                            "type": "string",
                            "example": "9mobile 9Payment Service Bank"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user/update-bank-account": {
      "post": {
        "summary": "Update user's bank account details",
        "description": "Updates the user's bank account number and bank code. Requires password confirmation.",
        "tags": [
          "User Operations"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "account_number": {
                    "type": "string",
                    "description": "User's bank account number",
                    "minLength": 10,
                    "maxLength": 10
                  },
                  "bank_code": {
                    "type": "string",
                    "description": "Code of the selected bank"
                  },
                  "password": {
                    "type": "string",
                    "description": "User's current password for confirmation"
                  }
                },
                "required": [
                  "account_number",
                  "bank_code",
                  "password"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Bank account details updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "ok"
                    },
                    "message": {
                      "type": "string",
                      "example": "Bank account details updated successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "account_number": {
                          "type": "string"
                        },
                        "bank_code": {
                          "type": "string"
                        },
                        "bank_name": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid password",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid password"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/user/update-password": {
      "post": {
        "summary": "Update Password",
        "description": "Updates the user's password",
        "tags": [
          "User Operations"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "current_password": {
                    "type": "string",
                    "format": "password",
                    "description": "The user's current password."
                  },
                  "new_password": {
                    "type": "string",
                    "format": "password",
                    "description": "The user's new password."
                  },
                  "new_password_confirmation": {
                    "type": "string",
                    "format": "password",
                    "description": "Confirmation of the new password."
                  }
                },
                "required": [
                  "current_password",
                  "new_password",
                  "new_password_confirmation"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "ok"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Password updated successfully"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user/send-email-verification": {
      "post": {
        "summary": "Send Email Verification Code",
        "tags": [
          "User Operations"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Email verification code sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "ok"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Email verification code sent successfully."
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user/verify-email": {
      "post": {
        "summary": "Verify Email",
        "tags": [
          "User Operations"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "code": {
                    "type": "string"
                  }
                },
                "required": [
                  "code"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Email verified successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "ok"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Email verified successfully."
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user/send-phone-verification": {
      "post": {
        "summary": "Send Phone Verification Code",
        "tags": [
          "User Operations"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Phone verification code sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "ok"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Phone verification code sent successfully."
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user/verify-phone": {
      "post": {
        "summary": "Verify Phone",
        "tags": [
          "User Operations"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "code": {
                    "type": "string"
                  }
                },
                "required": [
                  "code"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Phone number verified successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "ok"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Phone number verified successfully."
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user/delete-account": {
      "post": {
        "summary": "Delete user account",
        "description": "Marks the user's account as deleted. The account can be reactivated by logging in within 15 days.",
        "tags": [
          "User Operations"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "password": {
                    "type": "string",
                    "description": "The user's current password for confirmation."
                  }
                },
                "required": [
                  "password"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Account deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "ok"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Account deleted successfully. You can reactivate your account by logging in within the next 15 days."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Incorrect password",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Incorrect password."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Unauthenticated."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/music/requests": {
      "post": {
        "summary": "Create a new music request",
        "tags": [
          "Music Requests"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "dj_id": {
                    "type": "integer"
                  },
                  "song_title": {
                    "type": "string"
                  },
                  "artist_name": {
                    "type": "string"
                  },
                  "artist_type": {
                    "type": "string",
                    "enum": [
                      "upcoming",
                      "popular"
                    ]
                  },
                  "music_url": {
                    "type": "string",
                    "format": "uri",
                    "nullable": true
                  }
                },
                "required": [
                  "dj_id",
                  "song_title",
                  "artist_name",
                  "artist_type"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Music request created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MusicRequest"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthenticated"
          }
        }
      }
    },
    "/music/requests/{id}": {
      "get": {
        "summary": "Get a single music request",
        "tags": [
          "Music Requests"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MusicRequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Unauthorized to view this music request"
          },
          "404": {
            "description": "Music request not found"
          }
        }
      }
    },
    "/music/requests-update/{id}": {
      "patch": {
        "summary": "Update a music request",
        "tags": [
          "Music Requests"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "enum": [
                      "accepted",
                      "rejected",
                      "played"
                    ]
                  }
                },
                "required": [
                  "status"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Music request updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/okResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/MusicRequest"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Unauthorized to update this music request"
          },
          "404": {
            "description": "Music request not found"
          }
        }
      }
    },
    "/music/dj/requests": {
      "get": {
        "summary": "List Music Requests for DJ",
        "tags": [
          "Music Requests"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of music requests for DJ",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/okResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/PaginatedMusicRequest"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/music/user/requests": {
      "get": {
        "summary": "List Music Requests for User",
        "tags": [
          "Music Requests"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of music requests for user",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/okResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/PaginatedMusicRequest"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/user/rate/{djId}": {
      "post": {
        "summary": "Rate a DJ",
        "tags": [
          "Music Requests"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "djId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RateDJ"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "DJ rated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/deposit/voucher": {
      "post": {
        "summary": "Deposit using a voucher",
        "description": "Allows users to deposit funds into their wallet using voucher.",
        "tags": [
          "User Wallet"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "voucher_code": {
                    "type": "string"
                  }
                },
                "required": [
                  "voucher_code"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Voucher deposit successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "ok"
                    },
                    "message": {
                      "type": "string",
                      "example": "Deposit successful"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "amount": {
                          "type": "number"
                        },
                        "new_balance": {
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid voucher code",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid voucher code"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Deposit failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Deposit failed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/deposit/crypto": {
      "post": {
        "summary": "Get crypto deposit address",
        "description": "Allows users to deposit funds into their wallet using crypto.",
        "tags": [
          "User Wallet"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "currency": {
                    "type": "string"
                  },
                  "network": {
                    "type": "string"
                  }
                },
                "required": [
                  "currency",
                  "network"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Crypto deposit address provided",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "ok"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "wallet_address": {
                          "type": "string"
                        },
                        "currency": {
                          "type": "string"
                        },
                        "network": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid cryptocurrency or network",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid cryptocurrency or network"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/deposit/card": {
      "post": {
        "summary": "Initiate card deposit",
        "description": "Allows users to deposit funds into their wallet using card.",
        "tags": [
          "User Wallet"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "number",
                    "minimum": 1
                  }
                },
                "required": [
                  "amount"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Card deposit initiated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "ok"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "payment_link": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid amount",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid amount"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Failed to generate payment link",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Failed to generate payment link"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/withdrawal/bank": {
      "post": {
        "summary": "Request a bank withdrawal",
        "description": "Allows a DJ to request a withdrawal from their wallet balance using bank transfer.",
        "tags": [
          "User Wallet"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "number",
                    "minimum": 1
                  }
                },
                "required": [
                  "amount"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Bank withdrawal request submitted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "ok"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string"
                        },
                        "withdrawal_request": {
                          "$ref": "#/components/schemas/BankWithdrawalRequest"
                        },
                        "new_balance": {
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data, insufficient balance, or missing bank details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "User is not authorized to make withdrawals",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Only DJs can request withdrawals."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/withdrawal/crypto": {
      "post": {
        "summary": "Request a crypto withdrawal",
        "description": "Allows a DJ to request a withdrawal from their wallet balance using crypto.",
        "tags": [
          "User Wallet"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "number",
                    "minimum": 1
                  },
                  "wallet_address": {
                    "type": "string"
                  },
                  "currency": {
                    "type": "string"
                  },
                  "network": {
                    "type": "string"
                  }
                },
                "required": [
                  "amount",
                  "wallet_address",
                  "currency",
                  "network"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Crypto withdrawal request submitted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "ok"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string"
                        },
                        "withdrawal_request": {
                          "$ref": "#/components/schemas/CryptoWithdrawalRequest"
                        },
                        "new_balance": {
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data or insufficient balance",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "User is not authorized to make withdrawals",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Only DJs can request withdrawals."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/transactions": {
      "get": {
        "summary": "Get user's transaction history",
        "description": "Retrieves a paginated list of transactions for the authenticated user. DJs can see withdrawals and credits, while regular users can see deposits and debits.",
        "tags": [
          "Transactions"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "transaction_type",
            "in": "query",
            "description": "Filter transactions by type. For DJs: 'withdrawal' or 'credit'. For regular users: 'deposit' or 'debit'. Leave empty to get all transactions",
            "schema": {
              "type": "string",
              "enum": [
                "withdrawal",
                "credit",
                "deposit",
                "debit"
              ]
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of transactions per page (1-100).",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 15
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination.",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "ok"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "current_page": {
                          "type": "integer"
                        },
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Transaction"
                          }
                        },
                        "first_page_url": {
                          "type": "string"
                        },
                        "from": {
                          "type": "integer"
                        },
                        "last_page": {
                          "type": "integer"
                        },
                        "last_page_url": {
                          "type": "string"
                        },
                        "links": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "url": {
                                "type": "string",
                                "nullable": true
                              },
                              "label": {
                                "type": "string"
                              },
                              "active": {
                                "type": "boolean"
                              }
                            }
                          }
                        },
                        "next_page_url": {
                          "type": "string",
                          "nullable": true
                        },
                        "path": {
                          "type": "string"
                        },
                        "per_page": {
                          "type": "integer"
                        },
                        "prev_page_url": {
                          "type": "string",
                          "nullable": true
                        },
                        "to": {
                          "type": "integer"
                        },
                        "total": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user/chats": {
      "get": {
        "summary": "Get user's chats",
        "description": "Retrieves all chats for the authenticated user, grouped by music request",
        "tags": [
          "Chat"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User's chats retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "ok"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/UserChatSummary"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/chat/send": {
      "post": {
        "summary": "Send a chat message",
        "tags": [
          "Chat"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendChatMessage"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Message sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatMessageResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/chat/{musicRequestId}": {
      "get": {
        "summary": "Get conversation for a music request",
        "tags": [
          "Chat"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "musicRequestId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Conversation retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConversationResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/chat/{musicRequestId}/end": {
      "post": {
        "summary": "Request to end conversation",
        "tags": [
          "Chat"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "musicRequestId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Conversation ended successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "Access token obtained during login or registration. Use this token in the Authorization header for authenticated requests."
      }
    },
    "schemas": {
      "okResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "ok"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "phone": {
            "type": "string"
          },
          "is_dj": {
            "type": "boolean"
          },
          "wallet_balance": {
            "type": "number",
            "format": "float"
          },
          "fee_upcoming_artist": {
            "type": "number",
            "format": "float"
          },
          "fee_popular_song": {
            "type": "number",
            "format": "float"
          },
          "online": {
            "type": "number",
            "format": "float"
          },
          "played": {
            "type": "number",
            "format": "float"
          },
          "city": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "latitude": {
            "type": "number",
            "format": "float"
          },
          "longitude": {
            "type": "number",
            "format": "float"
          },
          "radius": {
            "type": "number",
            "format": "float"
          },
          "email_verified": {
            "type": "boolean"
          },
          "phone_verified": {
            "type": "boolean"
          },
          "rating": {
            "type": "number",
            "format": "float"
          },
          "rating_count": {
            "type": "number",
            "format": "float"
          }
        }
      },
      "MusicRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "user_id": {
            "type": "integer"
          },
          "dj_id": {
            "type": "integer"
          },
          "song_title": {
            "type": "string"
          },
          "artist_name": {
            "type": "string"
          },
          "artist_type": {
            "type": "string"
          },
          "music_url": {
            "type": "string",
            "nullable": true
          },
          "fee": {
            "type": "number"
          },
          "status": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "PaginatedMusicRequest": {
        "type": "object",
        "properties": {
          "current_page": {
            "type": "integer"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MusicRequest"
            }
          },
          "first_page_url": {
            "type": "string"
          },
          "from": {
            "type": "integer"
          },
          "last_page": {
            "type": "integer"
          },
          "last_page_url": {
            "type": "string"
          },
          "links": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "url": {
                  "type": "string",
                  "nullable": true
                },
                "label": {
                  "type": "string"
                },
                "active": {
                  "type": "boolean"
                }
              }
            }
          },
          "next_page_url": {
            "type": "string",
            "nullable": true
          },
          "path": {
            "type": "string"
          },
          "per_page": {
            "type": "integer"
          },
          "prev_page_url": {
            "type": "string",
            "nullable": true
          },
          "to": {
            "type": "integer"
          },
          "total": {
            "type": "integer"
          }
        }
      },
      "Paginated": {
        "type": "object",
        "properties": {
          "current_page": {
            "type": "integer"
          },
          "first_page_url": {
            "type": "string"
          },
          "from": {
            "type": "integer"
          },
          "last_page": {
            "type": "integer"
          },
          "last_page_url": {
            "type": "string"
          },
          "next_page_url": {
            "type": "string",
            "nullable": true
          },
          "path": {
            "type": "string"
          },
          "per_page": {
            "type": "integer"
          },
          "prev_page_url": {
            "type": "string",
            "nullable": true
          },
          "to": {
            "type": "integer"
          },
          "total": {
            "type": "integer"
          }
        }
      },
      "Transaction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "user_id": {
            "type": "integer"
          },
          "amount": {
            "type": "number",
            "format": "float"
          },
          "description": {
            "type": "string"
          },
          "transaction_type": {
            "type": "string",
            "enum": [
              "withdrawal",
              "credit",
              "deposit",
              "debit"
            ]
          },
          "reference_id": {
            "type": "integer",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "BankWithdrawalRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "user_id": {
            "type": "integer"
          },
          "amount": {
            "type": "number"
          },
          "withdrawal_method": {
            "type": "string",
            "enum": [
              "bank"
            ]
          },
          "account_number": {
            "type": "string"
          },
          "bank_code": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "processed",
              "failed"
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "CryptoWithdrawalRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "user_id": {
            "type": "integer"
          },
          "amount": {
            "type": "number"
          },
          "withdrawal_method": {
            "type": "string",
            "enum": [
              "crypto"
            ]
          },
          "wallet_address": {
            "type": "string"
          },
          "currency": {
            "type": "string"
          },
          "network": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "processed",
              "failed"
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "GeneralInfo": {
        "type": "object",
        "properties": {
          "site_name": {
            "type": "string"
          },
          "support_email": {
            "type": "string",
            "format": "email"
          },
          "support_phone": {
            "type": "string"
          },
          "facebook_link": {
            "type": "string",
            "format": "uri"
          },
          "twitter_link": {
            "type": "string",
            "format": "uri"
          },
          "instagram_link": {
            "type": "string",
            "format": "uri"
          },
          "live_chat_url": {
            "type": "string",
            "format": "uri"
          },
          "supported_coins": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SupportedCoin"
            }
          }
        }
      },
      "SupportedCoin": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "symbol": {
            "type": "string"
          },
          "networks": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PaginatedDJListWithDistance": {
        "type": "object",
        "properties": {
          "current_page": {
            "type": "integer"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DJWithDistance"
            }
          },
          "first_page_url": {
            "type": "string"
          },
          "from": {
            "type": "integer"
          },
          "last_page": {
            "type": "integer"
          },
          "last_page_url": {
            "type": "string"
          },
          "links": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "url": {
                  "type": "string",
                  "nullable": true
                },
                "label": {
                  "type": "string"
                },
                "active": {
                  "type": "boolean"
                }
              }
            }
          },
          "next_page_url": {
            "type": "string",
            "nullable": true
          },
          "path": {
            "type": "string"
          },
          "per_page": {
            "type": "integer"
          },
          "prev_page_url": {
            "type": "string",
            "nullable": true
          },
          "to": {
            "type": "integer"
          },
          "total": {
            "type": "integer"
          }
        }
      },
      "DJWithDistance": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "phone": {
            "type": "string"
          },
          "is_dj": {
            "type": "boolean"
          },
          "city": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "latitude": {
            "type": "number",
            "format": "float"
          },
          "longitude": {
            "type": "number",
            "format": "float"
          },
          "distance": {
            "type": "number",
            "format": "float",
            "description": "Distance from the user in kilometers"
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "error"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "ValidationError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "errors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "SendChatMessage": {
        "type": "object",
        "required": [
          "music_request_id",
          "message"
        ],
        "properties": {
          "music_request_id": {
            "type": "integer"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "ChatMessageResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "ok"
          },
          "data": {
            "$ref": "#/components/schemas/ChatMessage"
          }
        }
      },
      "ChatMessage": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "music_request_id": {
            "type": "integer"
          },
          "sender_id": {
            "type": "integer"
          },
          "receiver_id": {
            "type": "integer"
          },
          "message": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "open",
              "closed"
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ConversationResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "ok"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatMessage"
            }
          }
        }
      },
      "UserChatSummary": {
        "type": "object",
        "properties": {
          "music_request_id": {
            "type": "integer"
          },
          "other_user": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "last_message": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string"
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "sender_id": {
                "type": "integer"
              }
            }
          },
          "message_count": {
            "type": "integer"
          },
          "status": {
            "type": "string",
            "enum": [
              "open",
              "closed"
            ]
          }
        }
      },
      "RateDJ": {
        "type": "object",
        "required": [
          "music_request_id",
          "rating"
        ],
        "properties": {
          "music_request_id": {
            "type": "integer"
          },
          "rating": {
            "type": "integer",
            "minimum": 1,
            "maximum": 5
          },
          "review": {
            "type": "string"
          }
        }
      },
      "SuccessResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "ok"
          },
          "message": {
            "type": "string"
          }
        }
      }
    },
    "responses": {
      "BadRequest": {
        "description": "Bad request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        }
      },
      "Forbidden": {
        "description": "Forbidden",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        }
      },
      "NotFound": {
        "description": "Not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        }
      }
    }
  }
}